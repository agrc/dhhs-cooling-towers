name: Release Events

on:
  release:
    types: [created]
  workflow_dispatch:

permissions:
  contents: write
  id-token: write
  deployments: write
  pull-requests: write

jobs:
  create-artifact:
    name: Create artifact
    runs-on: ubuntu-latest
    environment:
      name: dev

    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4
        with:
          show-progress: false

      - name: üï∫Ô∏è Checkout model
        uses: actions/checkout@v4
        with:
          show-progress: false
          repository: ultralytics/yolov5
          path: yolov5

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: üì• Download dependencies
        run: pip install gdown

      - name: üèãÔ∏è‚Äç‚ôÄÔ∏è Download weights
        run: gdown ${{ secrets.WEIGHTS_ID }}
        working-directory: tower_scout

      - name: üê≥ Set up Docker Buildx
        id: builder
        uses: docker/setup-buildx-action@v3

      - name: üè∑Ô∏è Extract tags from GitHub
        id: meta
        uses: docker/metadata-action@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          images: us-central1-docker.pkg.dev/${{ secrets.PROJECT_ID }}/images/job
          tags: |
            type=raw,value=latest

      - name: üóùÔ∏è Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT_EMAIL }}
          token_format: "access_token"

      - name: üóùÔ∏è Authenticate Docker to Google Cloud
        uses: docker/login-action@v3
        with:
          registry: us-central1-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: üì¶ Build and push image
        uses: docker/build-push-action@v5
        with:
          file: ./Dockerfile
          provenance: false
          builder: ${{ steps.builder.outputs.name }}
          tags: us-central1-docker.pkg.dev/${{ secrets.PROJECT_ID }}/images/job
          context: .
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: ‚òÅÔ∏è Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: üöÄ Deploy to Cloud Run Job
        run: |
          if [ ! "$(gcloud run jobs list | grep default)" ]; then
            gcloud run jobs create default \
              --region us-central1 \
              --image us-central1-docker.pkg.dev/${{ secrets.PROJECT_ID }}/images/job:latest \
              --service-account cloud-run-sa@${{ secrets.PROJECT_ID }}.iam.gserviceaccount.com \
              --set-env-vars PY_ENV=production,PROJECT_ID=${{ secrets.PROJECT_ID }},JOB_SIZE=50,CLOUDSQL_CONNECTION_STRING=${{ secrets.CLOUDSQL_CONNECTION_STRING }} \
              --memory=2Gi \
              --cpu=1 \
              --max-retries 0 \
              --parallelism 0 \
              --set-secrets=/secrets/app/secrets=secrets:latest \
              --set-cloudsql-instances=${{ secrets.CLOUDSQL_CONNECTION_STRING }}
          else
            gcloud run jobs update default \
                --region us-central1 \
                --image us-central1-docker.pkg.dev/${{ secrets.PROJECT_ID }}/images/job:latest \
                --service-account cloud-run-sa@${{ secrets.PROJECT_ID }}.iam.gserviceaccount.com \
                --set-env-vars PY_ENV=production,PROJECT_ID=${{ secrets.PROJECT_ID }},JOB_SIZE=50,CLOUDSQL_CONNECTION_STRING=${{ secrets.CLOUDSQL_CONNECTION_STRING }} \
                --memory=2Gi \
                --cpu=1 \
                --max-retries 0 \
                --parallelism 0 \
                --update-secrets=/secrets/app/secrets=secrets:latest \
                --add-cloudsql-instances=${{ secrets.CLOUD_SQL_CONNECTION_STRING }}
          fi
